// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores Store[]

}

model VerificationToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String
  products Product[]
  user User @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, slug])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  name String
  slug String
  description String

  image String?

  shop Store @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shop_id String @db.ObjectId

  price Float @default(0.00)

  sections AttributeSection[]

  category_ids String[] @db.ObjectId
  categories ProductCategory[] @relation(fields: [category_ids], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, slug])
}

model AttributeSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @db.String

  product Product @relation(fields: [product_id], references: [id])
  product_id String @db.ObjectId

  attributes Attribute[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Attribute {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type AttributeType

  value String
  name String

  attribute_section AttributeSection @relation(fields: [attribute_section_id], references: [id])
  attribute_section_id String @db.ObjectId

}

model ProductCategory{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @db.String
  slug String @db.String

  products_ids String[] @db.ObjectId
  products Product[] @relation(fields: [products_ids], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


enum AttributeType {
  colors
  sizes
}