// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores Store[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id Int @id @default(autoincrement())
  name String
  slug String
  products Product[]
  user User @relation(fields: [user_id], references: [id])
  user_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, slug])
}

model Product {
  id Int @id @default(autoincrement())
  
  name String
  slug String
  description String

  categories CategoriesOnProducts[]
  shop Store @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shop_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, slug])
}

model ProductCategory {
  id Int @id @default(autoincrement())
  name String
  slug String

  products CategoriesOnProducts[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, slug])
}

model CategoriesOnProducts {
  product Product @relation(fields: [product_id], references: [id], onUpdate: Cascade)
  product_id Int
  productCategory ProductCategory @relation(fields: [product_category_id], references: [id], onUpdate: Cascade)
  product_category_id Int

  @@id([product_id, product_category_id])
}